<?xml version="1.0" encoding="utf-8"?>
<xsd:schema version="2.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--NetworkMesh: root element-->
<!--"key" element: specifies attribute "id" as a key within the containing element in the XML instance-->
<!--"keyref" element: allows to refer to an attribute "id"-->
	<xsd:element name="BoundaryConditionsGraph" type="BoundaryConditionsGraphType">
		<xsd:annotation>
			<xsd:documentation>     XML Schema for Boundary Conditions.
     The first element declared (root element) is called BoundaryConditionsGraph.
     "BoundaryConditions" is the leaf element and is identified by a unique ID.
     The rest of the file contains the definition of all used types.
     Last updated on 2010-12-09 by Simone Manini.</xsd:documentation>
        </xsd:annotation>
        
        <xsd:key name="bc_id">
			<xsd:selector xpath="boundaryconditions/boundarycondition"/>
			<xsd:field xpath="@id"/>
		</xsd:key>
		
	</xsd:element>
		
<!--BoundaryConditionsGraph type-->
	<xsd:complexType name="BoundaryConditionsGraphType">
		<xsd:sequence>
			<xsd:element name="boundaryconditions" type="boundaryconditionsType"/>
            <xsd:element name="simulation_parameters" type="simulation_parametersType"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:integer" use="required"/>
		<xsd:attribute name="version" type="xsd:string" use="required"/>
	</xsd:complexType>

<!--BoundaryConditions type-->
<!--it contains a sequence of boundaryconditions-->
<!--each of these is identified by an ID and by type-->
<!--at least a boundarycondition is necessary-->
<!--each boundarycondition is described by  parameters-->
	<xsd:complexType name="boundaryconditionsType">
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="1" name="boundarycondition" type="boundaryconditionType"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="boundaryconditionType">
		<xsd:all>
			<xsd:element name="parameters" type="parametersType"/>
			<xsd:element name="entities" type="entitiesType"/>
		</xsd:all>
		<xsd:attribute name="id" type="xsd:string" use="required"/>
		<xsd:attribute name="type" type="boundaryconditionTypeType" use="required"/>
		<xsd:attribute name="name" type="xsd:string"/>
	</xsd:complexType>
	
	<xsd:simpleType name="boundaryconditionTypeType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="transmural pressures"/>
			<xsd:enumeration value="inflow"/>
			<xsd:enumeration value="outflow pressure"/>
		</xsd:restriction>
	</xsd:simpleType>
	
<!--parameters type: prescribed external pressures and inflow's parameters-->
<!--if specific information are available: array of values in several locations-->
<!--global value of parameter of interest-->
	<xsd:complexType name="parametersType">
		<xsd:all>
			<xsd:element maxOccurs="1" minOccurs="0" name="pressure_array" type="arrayType"/>
			<xsd:element minOccurs="0" name="pressure" type="parameterType"/>
			<xsd:element minOccurs="0" name="A0" type="parameterType"/>						     
			<xsd:element minOccurs="0" name="fourier_coeffs" type="fourierType"/>
		</xsd:all>
	</xsd:complexType>
	
    <xsd:complexType name="arrayType">
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="2" name="value" type="valueType"/>
		</xsd:sequence>
		<xsd:attribute name="unit" type="xsd:string" use="required"/>
	</xsd:complexType>

	<xsd:complexType name="valueType">
		<xsd:choice>
			<xsd:element name="scalar" type="xsd:float"/>
			<xsd:element name="vector" type="vectorType"/>
		</xsd:choice>
		<xsd:attribute name="t" type="xsd:float"/>
	</xsd:complexType>

    <xsd:simpleType name="vectorType">
		<xsd:restriction>
			<xsd:simpleType>
				<xsd:list itemType="xsd:float"/>
			</xsd:simpleType>
			<xsd:length value="3"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="parameterType">
		<xsd:choice>
			<xsd:element name="scalar" type="xsd:float"/>
			<xsd:element name="vector" type="vectorType"/>
		</xsd:choice>
		<xsd:attribute name="unit" type="xsd:string"/>
	</xsd:complexType>
	
	<xsd:complexType name="fourierType">
		<xsd:all>
			<xsd:element name="matrix_nxm" type="matrixType"/>
		</xsd:all>
		<xsd:attribute name="n" type="xsd:int" use="required"/>
	    <xsd:attribute name="m" type="xsd:int" use="required"/>
	</xsd:complexType>
	
	<xsd:simpleType name="matrixType">
		<xsd:restriction>
			<xsd:simpleType>
				<xsd:list itemType="xsd:float"/>
			</xsd:simpleType>
		</xsd:restriction>
	</xsd:simpleType>
	
<!--Entities type-->
<!--it contains a sequence of entities ("entity" element)-->
<!--each entity is identified by an ID-->
  <xsd:complexType name="entitiesType">   
   <xsd:sequence> 
    <xsd:element name="entity" type="entityType" minOccurs="1" maxOccurs="unbounded"/>
   </xsd:sequence>
  </xsd:complexType>
 
  <xsd:complexType name="entityType">    
   <xsd:attribute name="id" type="xsd:string" use="required"/>
   <xsd:attribute name="node_id" type="xsd:string"/>
  </xsd:complexType>


<!--simulation_parameters type-->
<!--it contains a sequence of parameters ("parameter" element)-->
<!--each parameter is identified by an ID-->
<!--each parameter is expressed by a scalar value-->
	<xsd:complexType name="simulation_parametersType">
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="1" name="parameter" type="simulation_parameterType"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="simulation_parameterType">
		<xsd:choice>
			<xsd:element name="scalar" type="xsd:float"/>
			<xsd:element name="expression" type="xsd:string"/>
		</xsd:choice>
		<xsd:attribute name="id" type="xsd:string" use="required"/>
		<xsd:attribute name="unit" type="xsd:string" use="required"/>
	</xsd:complexType>

  </xsd:schema>
